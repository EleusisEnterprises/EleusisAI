//@version=5
indicator("Track Highest High and Lowest Low with 100-Bar Lookback and Rays", overlay=true)

// Define EMA periods
ema9_period = 9
ema21_period = 21
ema55_period = 55

// Define colors for each EMA
color_ema9 = color.new(#00FFFF, 0) // Cyan
color_ema21 = color.new(#FFD700, 0) // Gold
color_ema55 = color.new(#FF00FF, 0) // Magenta

// Define background colors
bg_color_bull = color.new(color.green, 85) // Semi-transparent green
bg_color_bear = color.new(color.red, 85)   // Semi-transparent red

// Calculate visible EMAs (on the current chart's timeframe)
ema9 = ta.ema(close, ema9_period)
ema21 = ta.ema(close, ema21_period)
ema55 = ta.ema(close, ema55_period)

// Plot visible EMAs
plot(ema9, title="9 EMA", color=color_ema9, linewidth=2)
plot(ema21, title="21 EMA", color=color_ema21, linewidth=2)
plot(ema55, title="55 EMA", color=color_ema55, linewidth=2)

// Calculate EMAs on the weekly timeframe for continuity
[weekly_ema9, weekly_ema21, weekly_ema55] = request.security(syminfo.tickerid, "W", [ta.ema(close, ema9_period), ta.ema(close, ema21_period), ta.ema(close, ema55_period)], lookahead=barmerge.lookahead_on)

// Store weekly EMA levels in variables for continuous use
weekly_ema9_level = weekly_ema9
weekly_ema21_level = weekly_ema21
weekly_ema55_level = weekly_ema55

// Detect when 9 EMA crosses 55 EMA on the weekly timeframe
cross_9_55_up = ta.crossover(weekly_ema9_level, weekly_ema55_level)
cross_9_55_down = ta.crossunder(weekly_ema9_level, weekly_ema55_level)

// Detect when 21 EMA crosses 55 EMA on the weekly timeframe
cross_21_55_up = ta.crossover(weekly_ema21_level, weekly_ema55_level)
cross_21_55_down = ta.crossunder(weekly_ema21_level, weekly_ema55_level)

// Confirm signals based on the prior 9/55 cross
bear_market_confirmed = cross_21_55_down and (weekly_ema9_level < weekly_ema55_level)
bull_market_confirmed = cross_21_55_up and (weekly_ema9_level > weekly_ema55_level)

// Save signals as variables
bear_signal = bear_market_confirmed
bull_signal = bull_market_confirmed

// Initialize persistent background color state with explicit type
var color bg_state = na

// Assume the initial state is bullish, then update based on signals
if (bar_index == 0)
    bg_state := bg_color_bull

// Update background state based on signals
if (bull_signal)
    bg_state := bg_color_bull
if (bear_signal)
    bg_state := bg_color_bear

// Apply persistent background color
bgcolor(bg_state)

// Lookback period
lookback_period = 70

// Calculate the highest high and lowest low over the last 100 bars
highest_high = ta.highest(high, lookback_period)
lowest_low = ta.lowest(low, lookback_period)

// Plot horizontal rays for highest high and lowest low
var line hh_ray = na
var line ll_ray = na

// Update or create the horizontal rays
if (bar_index > 0) // Ensure this is not the first bar (avoiding null reference)
    if (na(hh_ray))
        hh_ray := line.new(x1=bar_index, y1=highest_high, x2=bar_index+1, y2=highest_high, color=color.green, width=2, extend=extend.right)
    else
        line.set_y1(hh_ray, highest_high)
        line.set_y2(hh_ray, highest_high)

    if (na(ll_ray))
        ll_ray := line.new(x1=bar_index, y1=lowest_low, x2=bar_index+1, y2=lowest_low, color=color.red, width=2, extend=extend.right)
    else
        line.set_y1(ll_ray, lowest_low)
        line.set_y2(ll_ray, lowest_low)

// The highest_high and lowest_low variables will hold the highest high and lowest low respectively
// These can be used for any further logic or conditions in your script.
