from py2neo import Graph, Node, Relationship
import os
from datetime import datetime
from openai_chat import generate_response
import logging

logger = logging.getLogger(__name__)

# Connect to Neo4j
graph = Graph(os.getenv("NEO4J_URI"), auth=(os.getenv("NEO4J_USER"), os.getenv("NEO4J_PASSWORD")))

def create_user_message(content):
    """
    Creates a user message node in Neo4j.

    Args:
        content (str): The content of the user's message.

    Returns:
        Node: The created user message node.
    """
    user_message = Node("UserMessage", content=content, timestamp=datetime.now().isoformat())
    graph.create(user_message)
    logger.info(f"User message created with content: '{content}' and saved to Neo4j.")
    return user_message

def create_elly_message(content):
    """
    Creates an EllyBot message node in Neo4j, or reuses an existing one if the content is the same.

    Args:
        content (str): The content of EllyBot's response.

    Returns:
        Node: The EllyBot message node (either newly created or reused).
    """
    # Check if an EllyMessage with the same content already exists
    existing_elly_message = graph.evaluate("""
    MATCH (e:EllyMessage {content: $content})
    RETURN e
    """, content=content)

    if existing_elly_message:
        logger.info(f"Reusing existing Elly message with content: '{content}'.")
        return existing_elly_message
    
    # Create a new EllyMessage node if no existing node is found
    elly_message = Node("EllyMessage", content=content, timestamp=datetime.now().isoformat())
    graph.create(elly_message)
    logger.info(f"Elly message created with content: '{content}' and saved to Neo4j.")
    
    return elly_message

def link_messages(user_message, elly_message):
    """
    Links a user message to an EllyBot response in chronological order and 
    ensures that the chain is continuous without loops.

    Args:
        user_message (Node): The user message node.
        elly_message (Node): The EllyBot response node.

    Returns:
        None
    """
    # Find the last message (either UserMessage or EllyMessage)
    last_message_query = """
    MATCH (m)
    WHERE m:UserMessage OR m:EllyMessage
    RETURN m
    ORDER BY m.timestamp DESC
    LIMIT 1
    """
    last_message = graph.evaluate(last_message_query)
    
    if last_message:
        # Link the last message (either UserMessage or EllyMessage) to the current user message
        last_to_user_relationship = Relationship(last_message, "FOLLOWS", user_message)
        graph.create(last_to_user_relationship)
        logger.info(f"Linked last message to current user message: '{last_message['content']}' -> '{user_message['content']}'")

    # Link the current user message to the new Elly response
    user_to_elly_relationship = Relationship(user_message, "FOLLOWS", elly_message)
    graph.create(user_to_elly_relationship)
    logger.info(f"Linked user message to Elly message: '{user_message['content']}' -> '{elly_message['content']}'")

def link_previous_elly_to_user(user_message):
    """
    Links the previous EllyBot message to the new user message in chronological order.

    Args:
        user_message (Node): The new user message node.

    Returns:
        None
    """
    # Find the last Elly message
    last_elly_query = """
    MATCH (e:EllyMessage)
    RETURN e
    ORDER BY e.timestamp DESC
    LIMIT 1
    """
    last_elly_message = graph.evaluate(last_elly_query)
    
    if last_elly_message:
        # Link the last Elly message to the current user message
        elly_to_user_relationship = Relationship(last_elly_message, "FOLLOWS", user_message)
        graph.create(elly_to_user_relationship)
        logger.info(f"Linked last Elly message to current user message: '{last_elly_message['content']}' -> '{user_message['content']}'")

## Message Context retrieval
def get_recent_messages(limit=15):
    """
    Retrieves the most recent messages from the conversation history stored in Neo4j.

    Args:
        limit (int): The maximum number of messages to retrieve.

    Returns:
        list: A list of messages ordered by time (oldest to newest).
    """
    recent_messages_query = """
    MATCH (m)
    WHERE m:UserMessage OR m:EllyMessage
    RETURN m
    ORDER BY m.timestamp DESC
    LIMIT $limit
    """
    result = graph.run(recent_messages_query, limit=limit).data()

    # Extract the content and order messages chronologically
    messages = [record['m']['content'] for record in reversed(result)]
    return messages

def generate_context_aware_response(prompt):
    """
    Generates a context-aware response by including recent conversation history retrieved from Neo4j.

    Args:
        prompt (str): The new user prompt.

    Returns:
        str: The response generated by EllyBot.
    """
    recent_messages = get_recent_messages(limit=5)
    context = "\n".join(recent_messages)
    if context:
        context_prompt = f"Based on the following recent conversation:\n{context}\n\nRespond to this: {prompt}"
    else:
        context_prompt = prompt

    # Generate response using the OpenAI model
    response = generate_response(context_prompt)
    return response
